<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright 2010 The myBatis Team Licensed under the Apache License, Version 
	2.0 (the "License"); you may not use this file except in compliance with 
	the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 
	Unless required by applicable law or agreed to in writing, software distributed 
	under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES 
	OR CONDITIONS OF ANY KIND, either express or implied. See the License for 
	the specific language governing permissions and limitations under the License. -->

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
     <!-- Quartz本地Schduler -->
	
	<bean id="localQuartzScheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean" lazy-init="false">
		<!-- Triggers集成 -->
		<property name="triggers">
			<list>
				<ref bean="cronTrigger1" />
				<ref bean="cronTrigger2" />
                <ref bean="cronTrigger3" />
			</list>
		</property>
		<!-- Quartz配置 -->
		<property name="quartzProperties">
			<props>
				<prop key="org.quartz.threadPool.threadCount">10</prop>
			</props>
		</property>
		<!-- 启动时延期3秒开始任务 -->
		<property name="startupDelay" value="30" />
	</bean>

	<!-- Cron式Trigger定义 -->
	<bean id="cronTrigger1" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="cronJobDetail1" />
		<property name="cronExpression" value="0 0 1 * * ?" />
	</bean>


	<!-- Cron JobDetajil, 基于MethodInvokingJobDetailFactoryBean调用普通Spring Bean -->
	<bean id="cronJobDetail1" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="infoJob" />
		<property name="targetMethod" value="gradeByInfo" />
		<!-- 同一任务在前一次执行未完成而Trigger时间又到时是否并发开始新的执行, 默认为true. -->
		<property name="concurrent" value="false" />
	</bean>



    <!-- Cron式Trigger定义 -->
    	<bean id="cronTrigger2" class="org.springframework.scheduling.quartz.CronTriggerBean">
    		<property name="jobDetail" ref="cronJobDetail2" />
    		<property name="cronExpression" value="0 0 1 * * ?" />
    	</bean>


    	<!-- Cron JobDetajil, 基于MethodInvokingJobDetailFactoryBean调用普通Spring Bean -->
    	<bean id="cronJobDetail2" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
    		<property name="targetObject" ref="speciallyJob" />
    		<property name="targetMethod" value="speciallyExceue" />
    		<!-- 同一任务在前一次执行未完成而Trigger时间又到时是否并发开始新的执行, 默认为true. -->
    		<property name="concurrent" value="false" />
    	</bean>

    <!-- Cron式Trigger定义 -->
       	<bean id="cronTrigger3" class="org.springframework.scheduling.quartz.CronTriggerBean">
       		<property name="jobDetail" ref="cronJobDetail3" />
       		<property name="cronExpression" value="0 0 1 * * ?" />
       	</bean>


       	<!-- Cron JobDetajil, 基于MethodInvokingJobDetailFactoryBean调用普通Spring Bean -->
       	<bean id="cronJobDetail3" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
       		<property name="targetObject" ref="inspectJob" />
       		<property name="targetMethod" value="gradeByInspect" />
       		<!-- 同一任务在前一次执行未完成而Trigger时间又到时是否并发开始新的执行, 默认为true. -->
       		<property name="concurrent" value="false" />
       	</bean>
	
	<!-- 被Cron执行的普通Spring Bean -->
	<bean id="infoJob" class="com.scttsc.healthy.job.info.InfoJob" />
    <bean id="inspectJob" class="com.scttsc.healthy.job.inspect.InspectJob" />
    <bean id="speciallyJob" class="com.scttsc.healthy.job.specially.SpeciallyJob" />
</beans>
